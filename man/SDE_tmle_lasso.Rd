% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SDE_tmle_lasso.R
\name{SDE_tmle_lasso}
\alias{SDE_tmle_lasso}
\title{SDE_tmle_lasso}
\usage{
SDE_tmle_lasso(data, forms, RCT = 0.5, B = NULL, Wnames, Wnamesalways,
  transport = TRUE, pooledM = TRUE, truth = NULL)
}
\arguments{
\item{data, }{data.frame where confounders have any names but the following, which must be
reserved as follows: A = treatment, Z = intermediate confounder, M = mediator and Y is the outcome.}

\item{forms, }{list of formulas. Include for each necessary model for outcome,
called Yform for outcome Y, QZform for outcome Qstar_Mg, Mform, Zform, Aform (can be NULL if RCT)
is selected as TRUE.}

\item{RCT}{either NULL or a value, if null, then the Aform is used to fit the propensity score,
otherwise propensity scores are set to RCT.}

\item{B, }{the number of bootstraps, default is NULL and should not be changed since this will
be invalid for use with lasso anyway.}

\item{transport}{if true you are transporting to site S=0}

\item{pooledM}{set to TRUE if you wish to define the stochastic intervention by the mechanism for
the mediator defined by pooling the regression across both sites.  Otherwise the stochastic intervention
will only be defined by the fit for S = 1.}

\item{truth}{set permanently to NULL, not used}
}
\value{
a list with a CI's for SDE and SIE for the means under (a*,a) combos (0,0), (0,1), (1,1)
and the epsilons for both sequential regressions for those three parameters
}
\description{
computes the sequential regression, targeted maximum likelihood estimate
for the stochastic direct effect or stochastic indirect effect using lasso. Note, this is
a non-transport parameter.
}
\examples{
# devtools::install_github("jeremyrcoyle/sl3")
# devtools::install_github("jlstiles/SDE_transport")
library("SDEtransportsim")
library("parallel")
library("doParallel")

#Set up data generating process:
data(example_dgp)
data = data_example
f_W = function(n) {
  W1 = rnorm(n)
  gender = rbinom(n, 1, 0.5)
  W2 = rnorm(n)
  data.frame(W1=W1, W2=W2, Wgender = gender)
}

f_S = function(W) {
  with(W, plogis(-.7*W1 + 0.1*W2 + .17))
}

# make a pscore model
f_A = function(S,W) {
  with(W, plogis(-.7*W1 + 0.1*W2 + .17))
}
# make a intermediate confounder model
f_Z = function(A,S,W) {
  df = as.data.frame(cbind(W, A = A))
  with(df, plogis(.4*W1 - W2 + .2*Wgender + 1*A*Wgender -.3 - .5*S))
}
# make an M model according to the restrictions
f_M = function(Z,W,S) {
  df = as.data.frame(cbind(Z=Z, W, S))
  with(df, plogis(1*W1 - W2 + .2*Wgender- 1.2*Z + S + .1))
}
# make a Y model according to the restrictions, main terms linear logistic reg.
# plug-in is biased and not robust like tmle
f_Y = function(M,Z,W) {
  df = as.data.frame(cbind(M = M, Z = Z, W))
  with(df, plogis(W2*M + 3*cos(W1)*Z-.4*Wgender - .4))
}

n=1000
data = gendata.SDEtransport(n, f_W, f_S, f_A, f_Z, f_M, f_Y)
truths = get_gstarM_glm(data, truth, formsNP)
debug(SDEtransportsim:::get_gstarM_glm)

# forms for non-transporting
formsNT=list(Aform = formula("A ~ W2 + W1"),
             Zstarform = formula("Z ~  A + W1 + W2"),
             QZform = formula("Qstar_Mg ~ Z + W2 + W1"),
             Mstarform = formula("M ~ Z + W1 + W2"),
             Yform = formula("Y ~ M + Z + W1 + W2"))

# forms for transporting without a pooled M
formsNP=list(Sform = formula("S ~  W1 + W2"),
           Aform = formula("A ~ W2 + W1 + S"),
           Zstarform = formula("Z ~  A + W1 + W2 + S"),
           QZform = formula("Qstar_Mg ~ Z + W2 + W1 + S"),
           Mstarform = formula("M ~ Z + W1 + W2"),
           Yform = formula("Y ~ M + Z + W1 + W2"))

# forms for transporting with a pooled M
forms=list(Sform = formula("S ~  W1 + W2"),
           Aform = formula("A ~ W2 + W1 + S"),
           Zstarform = formula("Z ~  A + W1 + W2 + S"),
           QZform = formula("Qstar_Mg ~ Z + W2 + W1 + S"),
           Mstarform = formula("M ~ Z + W1 + W2 + S"),
           Yform = formula("Y ~ M + Z + W1 + W2"))


W = data[,grep("W", colnames(data))]
head(data)
data = cbind(W, A=data$A, S=data$S, Z=data$Z, M=data$M, Y=data$Y)

# define the forms for all the regressions

Wnames = c("W1", "W2")
Wnamesalways = c("W1")
# run the tmle, no bootstrapping inference (bad for lasso anyway)
data$weights = rep(1,nrow(data))
testresNT = SDE_tmle_lasso(data, formsNT, RCT = 0.5, Wnames = Wnames, Wnamesalways = Wnamesalways, 
                         B = NULL, transport = FALSE, pooledM = TRUE) 

testres = SDE_tmle_lasso(data, forms, RCT = 0.5, Wnames = Wnames, Wnamesalways = Wnamesalways, 
                         B = NULL, transport = TRUE, pooledM = TRUE) 

testresNP = SDE_tmle_lasso(data, formsNP, RCT = 0.5, Wnames = Wnames, Wnamesalways = Wnamesalways, 
                         B = NULL, transport = TRUE, pooledM = FALSE) 

testresNT$CI_SDE
testres$CI_SDE
testresNP$CI_SDE

testresNT$CI_SIE
testres$CI_SIE
testresNP$CI_SIE
debug(SDE_tmle_lasso)
# debug(SDE_tmle_lassoNT)
# debug(get_gstarM_lasso)
}
